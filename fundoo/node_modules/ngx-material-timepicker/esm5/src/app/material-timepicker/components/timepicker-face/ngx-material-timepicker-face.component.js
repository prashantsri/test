/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import { TimeUnit } from '../../models/time-unit.enum';
/** @type {?} */
var CLOCK_HAND_STYLES = {
    small: {
        height: '75px',
        top: 'calc(50% - 75px)'
    },
    large: {
        height: '103px',
        top: 'calc(50% - 103px)'
    }
};
var NgxMaterialTimepickerFaceComponent = /** @class */ (function () {
    function NgxMaterialTimepickerFaceComponent() {
        this.timeUnit = TimeUnit;
        this.innerClockFaceSize = 85;
        this.timeChange = new EventEmitter();
        this.timeSelected = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setClockHandPosition();
        this.addTouchEvents();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var faceTimeChanges = changes['faceTime'];
        /** @type {?} */
        var selectedTimeChanges = changes['selectedTime'];
        if ((faceTimeChanges && faceTimeChanges.currentValue)
            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {
            /* Set time according to passed an input value */
            this.selectedTime = this.faceTime.find(function (time) { return time.time === _this.selectedTime.time; });
        }
        if (selectedTimeChanges && selectedTimeChanges.currentValue) {
            this.setClockHandPosition();
        }
        if (faceTimeChanges && faceTimeChanges.currentValue) {
            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError
            setTimeout(function () { return _this.selectAvailableTime(); });
        }
    };
    /**
     * @param {?} _
     * @param {?} time
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.trackByTime = /**
     * @param {?} _
     * @param {?} time
     * @return {?}
     */
    function (_, time) {
        return time.time;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.onMousedown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        this.isStarted = true;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.selectTime = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {
            return;
        }
        /** @type {?} */
        var clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();
        /* Get x0 and y0 of the circle */
        /** @type {?} */
        var centerX = clockFaceCords.left + clockFaceCords.width / 2;
        /** @type {?} */
        var centerY = clockFaceCords.top + clockFaceCords.height / 2;
        /* Counting the arctangent and convert it to from radian to deg */
        /** @type {?} */
        var arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;
        /* Get angle according to quadrant */
        /** @type {?} */
        var circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);
        /* Check if selected time from the inner clock face (24 hours format only) */
        /** @type {?} */
        var isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);
        /* Round angle according to angle step */
        /** @type {?} */
        var angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;
        /** @type {?} */
        var roundedAngle = isInnerClockChosen
            ? roundAngle(circleAngle, angleStep) + 360
            : roundAngle(circleAngle, angleStep);
        /** @type {?} */
        var selectedTime = this.faceTime.find(function (val) { return val.angle === roundedAngle; });
        if (selectedTime && !selectedTime.disabled) {
            this.timeChange.next(selectedTime);
            /* To let know whether user ended interaction with clock face */
            if (!this.isStarted) {
                this.timeSelected.next();
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.onMouseup = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        this.isStarted = false;
    };
    /**
     * @param {?} hour
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.isHourSelected = /**
     * @param {?} hour
     * @return {?}
     */
    function (hour) {
        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;
    };
    /**
     * @param {?} minute
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.isMinuteSelected = /**
     * @param {?} minute
     * @return {?}
     */
    function (minute) {
        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;
    };
    /**
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeTouchEvents();
    };
    /**
     * @private
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.addTouchEvents = /**
     * @private
     * @return {?}
     */
    function () {
        this.touchStartHandler = this.onMousedown.bind(this);
        this.touchEndHandler = this.onMouseup.bind(this);
        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);
        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);
    };
    /**
     * @private
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.removeTouchEvents = /**
     * @private
     * @return {?}
     */
    function () {
        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);
        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);
    };
    /**
     * @private
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.setClockHandPosition = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.format === 24) {
            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {
                this.decreaseClockHand();
            }
            else {
                this.increaseClockHand();
            }
        }
        this.clockHand.nativeElement.style.transform = "rotate(" + this.selectedTime.angle + "deg)";
    };
    /**
     * @private
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.selectAvailableTime = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var currentTime = this.faceTime.find(function (time) { return _this.selectedTime.time === time.time; });
        this.isClockFaceDisabled = this.faceTime.every(function (time) { return time.disabled; });
        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {
            /** @type {?} */
            var availableTime = this.faceTime.find(function (time) { return !time.disabled; });
            this.timeChange.next(availableTime);
        }
    };
    /**
     * @private
     * @param {?} x0
     * @param {?} y0
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.isInnerClockFace = /**
     * @private
     * @param {?} x0
     * @param {?} y0
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x0, y0, x, y) {
        /* Detect whether time from the inner clock face or not (24 format only) */
        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.decreaseClockHand = /**
     * @private
     * @return {?}
     */
    function () {
        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;
        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;
    };
    /**
     * @private
     * @return {?}
     */
    NgxMaterialTimepickerFaceComponent.prototype.increaseClockHand = /**
     * @private
     * @return {?}
     */
    function () {
        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;
        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;
    };
    NgxMaterialTimepickerFaceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-material-timepicker-face',
                    template: "<div class=\"clock-face\" #clockFace>\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\n        <div class=\"clock-face__number clock-face__number--outer\"\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n             *ngFor=\"let time of faceTime.slice(0, 12); trackBy: trackByTime\">\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n                  [ngClass]=\"{'active': isHourSelected(time.time), 'disabled': time.disabled}\">{{time.time}}</span>\n        </div>\n        <div class=\"clock-face__inner\" *ngIf=\"faceTime.length > 12\"\n             [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\">\n            <div class=\"clock-face__number clock-face__number--inner\"\n                 [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n                 [style.height.px]=\"innerClockFaceSize\"\n                 *ngFor=\"let time of faceTime.slice(12, 24); trackBy: trackByTime\">\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n                  [ngClass]=\"{'active': isHourSelected(time.time), 'disabled': time.disabled}\">\n                {{time.time === 0 ? '00' : time.time}}</span>\n            </div>\n        </div>\n    </div>\n\n    <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\n          #clockHand [hidden]=\"isClockFaceDisabled\"></span>\n</div>\n<ng-template #minutesFace>\n    <div class=\"clock-face__container\">\n        <div class=\"clock-face__number clock-face__number--outer\"\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n          [ngClass]=\"{'active': isMinuteSelected(time.time), 'disabled': time.disabled}\">\n\t{{time.time === 0 ? '00' : time.time | minutesFormatter: minutesGap}}</span>\n        </div>\n    </div>\n</ng-template>\n",
                    styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:flex;justify-content:center;padding:20px;box-sizing:border-box}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;-webkit-transform-origin:0 100%;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}.clock-face__number--inner>span{font-size:14px;color:#929292}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:flex;justify-content:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__number>span.disabled{color:#c5c5c5}.clock-face__clock-hand{height:103px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}"]
                }] }
    ];
    NgxMaterialTimepickerFaceComponent.propDecorators = {
        faceTime: [{ type: Input }],
        selectedTime: [{ type: Input }],
        unit: [{ type: Input }],
        format: [{ type: Input }],
        minutesGap: [{ type: Input }],
        timeChange: [{ type: Output }],
        timeSelected: [{ type: Output }],
        clockFace: [{ type: ViewChild, args: ['clockFace',] }],
        clockHand: [{ type: ViewChild, args: ['clockHand',] }],
        onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        selectTime: [{ type: HostListener, args: ['click', ['$event'],] }, { type: HostListener, args: ['touchmove', ['$event.changedTouches[0]'],] }, { type: HostListener, args: ['touchend', ['$event.changedTouches[0]'],] }, { type: HostListener, args: ['mousemove', ['$event'],] }],
        onMouseup: [{ type: HostListener, args: ['mouseup', ['$event'],] }]
    };
    return NgxMaterialTimepickerFaceComponent;
}());
export { NgxMaterialTimepickerFaceComponent };
if (false) {
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.timeUnit;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.isClockFaceDisabled;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.innerClockFaceSize;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.faceTime;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.selectedTime;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.unit;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.format;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.minutesGap;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.timeChange;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.timeSelected;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.clockFace;
    /** @type {?} */
    NgxMaterialTimepickerFaceComponent.prototype.clockHand;
    /**
     * @type {?}
     * @private
     */
    NgxMaterialTimepickerFaceComponent.prototype.isStarted;
    /**
     * @type {?}
     * @private
     */
    NgxMaterialTimepickerFaceComponent.prototype.touchStartHandler;
    /**
     * @type {?}
     * @private
     */
    NgxMaterialTimepickerFaceComponent.prototype.touchEndHandler;
}
/**
 * @param {?} angle
 * @param {?} step
 * @return {?}
 */
function roundAngle(angle, step) {
    return Math.round(angle / step) * step;
}
/**
 * @param {?} x0
 * @param {?} y0
 * @param {?} x
 * @param {?} y
 * @param {?} currentAngle
 * @return {?}
 */
function countAngleByCords(x0, y0, x, y, currentAngle) {
    if (y > y0 && x >= x0) { // II quarter
        return 180 - currentAngle;
    }
    else if (y > y0 && x < x0) { // III quarter
        return 180 + currentAngle;
    }
    else if (y < y0 && x < x0) { // IV quarter
        return 360 - currentAngle;
    }
    else { // I quarter
        return currentAngle;
    }
}
//# sourceMappingURL=data:application/json;base64,