{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/timepicker-time.namespace.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","AM","PM","TWELVE","TWENTY_FOUR","moment","_moment","TimeAdapter","formatTime","time","format","timeFormat","TimeFormat","convertTimeToMoment","isTimeAvailable","min","max","granularity","convertedTime","isAfter","isSameOrAfter","isBefore","isSameOrBefore","isBetween","formatHour","currentHour","period","hour","TimePeriod","moment_","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","defaultTime","toDate","isValid","getHours","minute","getMinutes","substr","toUpperCase","resetTime","next","asObservable","setDefaultTimeIfAvailable","getFullTime","getValue","Injectable","HOUR","MINUTE","TimepickerTime","NgxMaterialTimepickerEventService","backdropClickSubject","Subject","keydownEventSubject","dispatchEvent","event","type","Error","ENTER","LEAVE","ESCAPE","NgxMaterialTimepickerComponent","timepickerService","eventService","_this","timeUnit","TimeUnit","activeTimeUnit","isOpened","isEsc","timeSet","EventEmitter","closed","subscriptions","push","merge","backdropClick","keydownEvent","pipe","filter","e","keyCode","subscribe","close","_minutesGap","gap","Math","floor","setDefaultTime","timepickerInput","disabled","ngOnInit","selectedHour","selectedMinute","selectedPeriod","registerInput","input","onHourChange","onMinuteChange","changePeriod","changeTimeUnit","unit","setTime","open","animationState","AnimationState","animationDone","phaseName","toState","onKeydown","stopPropagation","ngOnDestroy","forEach","subscription","unsubscribe","Component","args","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","Output","HostListener","StyleSanitizerPipe","domSanitizer","value","bypassSecurityTrustStyle","Pipe","name","DomSanitizer","fill","map","v","disableHours","hours","config","currentTime","minutes","disableMinutes","hour_1","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","ngOnChanges","changes","currentValue","minutesGap","minTime","maxTime","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","ngAfterViewInit","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","nativeElement","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","val","onMouseup","isHourSelected","isClockFaceDisabled","isMinuteSelected","removeTouchEvents","touchStartHandler","bind","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","every","availableTime","sqrt","pow","ViewChild","step","round","TimeFormatterPipe","undefined","moment.utc","NgxMaterialTimepickerButtonComponent","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","elementRef","_format","_value","timepickerSubscriptions","onTouched","onChange","_min","_max","updateInputValue","console","warn","picker","registerTimepicker","_timepicker","onInput","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Directive","host","[disabled]","(input)","(blur)","ElementRef","OverlayDirective","NgxMaterialTimepickerToggleIconDirective","NgxMaterialTimepickerToggleComponent","_disabled","timepicker","ContentChild","NgxMaterialTimepickerHoursFace","hourChange","hourSelected","hoursList","NgxMaterialTimepicker12HoursFaceComponent","_super","tslib_1.__extends","NgxMaterialTimepicker24HoursFaceComponent","ngAfterContentInit","NgxMaterialTimepickerDialComponent","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepickerDialControlComponent","timeChanged","timeList","isEditable","firstChange","saveTimeAndChangeTimeUnit","previousTime","updateTime","onKeyDown","char","String","fromCharCode","isInputAllowed","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","some","ctrlKey","metaKey","MinutesFormatterPipe","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","AutofocusDirective","element","document","activeElement","isFocusActive","focus","Optional","Inject","DOCUMENT","NgxMaterialTimepickerModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWENTY_FOUR = 'HH:mm'\n}\n","import * as _moment from 'moment';\nimport {Moment, unitOfTime} from 'moment';\nimport {TimeFormat} from '../models/time-format.enum';\nimport {TimePeriod} from '../models/time-period.enum';\n\nconst moment = _moment;\n\nexport class TimeAdapter {\n\n    static formatTime(time: string, format = 12): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n        return moment(time, TimeFormat.TWELVE).format(timeFormat);\n    }\n\n    static convertTimeToMoment(time: string): Moment {\n        return moment(time, TimeFormat.TWELVE);\n    }\n\n    static isTimeAvailable(time: string, min?: Moment, max?: Moment, granularity?: unitOfTime.StartOf): boolean {\n        if (!time) {\n            return;\n        }\n        const convertedTime = this.convertTimeToMoment(time);\n        const isAfter = (min && !max)\n            && convertedTime.isSameOrAfter(min, granularity);\n        const isBefore = (max && !min)\n            && convertedTime.isSameOrBefore(max, granularity);\n        const isBetween = (min && max)\n            && convertedTime.isBetween(min, max, granularity, '[]');\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || isBetween || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        let hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\nimport {BehaviorSubject, Observable} from 'rxjs';\nimport {TimePeriod} from '../models/time-period.enum';\nimport * as moment_ from 'moment';\nimport {TimeFormat} from '../models/time-format.enum';\nimport {TimeAdapter} from './time-adapter';\nimport {Moment} from 'moment';\n\nconst moment = moment_;\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable()\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n    private set defaultTime(time: string) {\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\n\n        if (moment(defaultTime).isValid()) {\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours()};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\n        } else {\n            this.resetTime();\n        }\n    }\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        this.periodSubject.next(period);\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: Moment, max: Moment, format: number) {\n        if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes')) {\n            this.defaultTime = TimeAdapter.formatTime(time, format);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const hour = this.hourSubject.getValue().time;\n        const minute = this.minuteSubject.getValue().time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable()\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable();\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable();\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {ClockFaceTime} from './models/clock-face-time.interface';\nimport * as _moment from 'moment';\nimport {TimeAdapter} from './services/time-adapter';\nimport {TimeFormat} from './models/time-format.enum';\nimport {DisabledTimeConfig} from './models/disabled-time-config.interface';\n\nconst moment = _moment;\n\nexport namespace TimepickerTime {\n\n    export function getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n    export function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);\n                const currentTime = moment().hour(+hour).format(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n    export function getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    export function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = moment().hour(hour).minute(+value.time).format(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n}\n","import {Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef} from '@angular/core';\nimport {ClockFaceTime} from './models/clock-face-time.interface';\nimport {TimePeriod} from './models/time-period.enum';\nimport {merge, Subscription} from 'rxjs';\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\nimport {TimeUnit} from './models/time-unit.enum';\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\nimport {filter} from 'rxjs/operators';\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\nimport {Moment} from 'moment';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    templateUrl: './ngx-material-timepicker.component.html',\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\n\n    selectedHour: ClockFaceTime;\n    selectedMinute: ClockFaceTime;\n    selectedPeriod: TimePeriod;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    isOpened = false;\n    animationState: AnimationState;\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n\n    @Input()\n    set minutesGap(gap: number) {\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Input()\n    set defaultTime(time: string) {\n        this.setDefaultTime(time);\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() closed = new EventEmitter<null>();\n\n    private _minutesGap: number;\n    private timepickerInput: TimepickerDirective;\n    private subscriptions: Subscription[] = [];\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService) {\n\n        this.subscriptions.push(merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .subscribe(() => this.close()));\n\n    }\n\n    get minTime(): string | Moment {\n        return this.timepickerInput && this.timepickerInput.min;\n    }\n\n    get maxTime(): string | Moment {\n        return this.timepickerInput && this.timepickerInput.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get format(): number {\n        return this.timepickerInput && this.timepickerInput.format;\n    }\n\n    ngOnInit() {\n        this.subscriptions.push(this.timepickerService.selectedHour\n            .subscribe(hour => this.selectedHour = hour));\n\n        this.subscriptions.push(this.timepickerService.selectedMinute\n            .subscribe(minute => this.selectedMinute = minute));\n\n        this.subscriptions.push(this.timepickerService.selectedPeriod\n            .subscribe(period => this.selectedPeriod = period));\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n    }\n\n    changeTimeUnit(unit: TimeUnit) {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime() {\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(time, this.minTime as Moment, this.maxTime as Moment, this.format);\n    }\n\n    open() {\n        this.isOpened = true;\n        this.animationState = AnimationState.ENTER;\n    }\n\n    close() {\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.isOpened = false;\n            this.activeTimeUnit = TimeUnit.HOUR;\n            this.closed.next();\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: KeyboardEvent) {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\n\n@Pipe({\n    name: 'styleSanitizer'\n})\nexport class StyleSanitizerPipe implements PipeTransform {\n\n    constructor(private domSanitizer: DomSanitizer) {\n    }\n\n    transform(value: string): any {\n        if (!value) {\n            return value;\n        }\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\n    }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {Moment} from 'moment';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss']\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<null>();\n\n    @ViewChild('clockFace') clockFace: ElementRef;\n    @ViewChild('clockHand') clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: MouseEvent | Touch): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\n        const roundedAngle = isInnerClockChosen\n            ? roundAngle(circleAngle, angleStep) + 360\n            : roundAngle(circleAngle, angleStep);\n\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next();\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: MouseEvent | TouchEvent) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    isHourSelected(hour: number): boolean {\n        return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;\n    }\n\n    isMinuteSelected(minute: number): boolean {\n        return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as moment from 'moment';\nimport {TimeUnit} from '../models/time-unit.enum';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number, timeUnit: TimeUnit): any {\n        if (time === undefined) {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return moment.utc(time * 3600 * 1000).format('HH');\n            case TimeUnit.MINUTE:\n                return moment.utc(time * 60 * 1000).format('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import {Directive, ElementRef, forwardRef, HostListener, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {Moment} from 'moment';\nimport {TimeAdapter} from '../services/time-adapter';\n\nconst VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimepickerDirective),\n    multi: true\n};\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [VALUE_ACCESSOR],\n    host: {\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | Moment) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.convertTimeToMoment(value);\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | Moment {\n        return this._min;\n    }\n\n    private _min: string | Moment;\n\n    @Input()\n    set max(value: string | Moment) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.convertTimeToMoment(value);\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | Moment {\n        return this._max;\n    }\n\n    private _max: string | Moment;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, this._format);\n        if (TimeAdapter.isTimeAvailable(time, <Moment>this._min, <Moment>this._max, 'minutes')) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        return this._value;\n    }\n\n    private _value = '';\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n    private timepickerSubscriptions: Subscription[] = [];\n    onTouched = () => {};\n    private onChange: (value: any) => void = () => {};\n\n    constructor(private elementRef: ElementRef) {\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.setDefaultTime(time);\n    }\n\n    onInput(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        this.defaultTime = value;\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this._value);\n                this.onTouched();\n            }));\n            this.timepickerSubscriptions.push(\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {Directive, HostListener} from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: MouseEvent) {\n        this.eventService.dispatchEvent(e);\n        e.preventDefault();\n    }\n\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import {EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {Moment} from 'moment';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<null>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTime.getHours(format);\n    }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTime.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import {AfterContentInit, Component} from '@angular/core';\nimport {NgxMaterialTimepickerHoursFace} from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html'\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTime.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {Moment} from 'moment';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTime.getHours(this.format);\n\n            this.hours = TimepickerTime.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTime.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {TimeFormatterPipe} from '../../pipes/time-formatter.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss']\n})\nexport class NgxMaterialTimepickerDialControlComponent implements OnChanges {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['time'] && (changes['time'].currentValue !== undefined)) {\n            if (this.isEditable && !changes['time'].firstChange) {\n                return;\n            }\n            this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit)\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    formatTime(): void {\n        if (this.isEditable) {\n            const time = this.time || this.previousTime;\n            this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        const char = String.fromCharCode(e.keyCode);\n\n\n        if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n\n        if (isInputAllowed(e)) {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + 1);\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - 1);\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isInputAllowed(e: KeyboardEvent): boolean {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105))\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {TimePeriod} from '../../models/time-period.enum';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimepickerTime} from '../../timepicker-time.namespace';\nimport {Moment} from 'moment';\nimport {animate, sequence, style, transition, trigger} from '@angular/animations';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: Moment;\n    @Input() maxTime: Moment;\n    @Input() selectedHour: number | string;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTime.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus());\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus());\n    }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\nimport {OverlayDirective} from './directives/overlay.directive';\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {FormsModule} from '@angular/forms';\nimport {NgxMaterialTimepickerDialComponent} from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {NgxMaterialTimepickerDialControlComponent} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport {MinutesFormatterPipe} from './pipes/minutes-formatter.pipe';\nimport {NgxMaterialTimepickerPeriodComponent} from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport {AutofocusDirective} from './directives/autofocus.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        StyleSanitizerPipe,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe\n    ]\n})\nexport class NgxMaterialTimepickerModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\n        };\n    }\n}\n"]}