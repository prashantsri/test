(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('moment'), require('@angular/core'), require('rxjs'), require('@angular/animations'), require('rxjs/operators'), require('@angular/platform-browser'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-material-timepicker', ['exports', 'moment', '@angular/core', 'rxjs', '@angular/animations', 'rxjs/operators', '@angular/platform-browser', '@angular/forms', '@angular/common'], factory) :
    (factory((global['ngx-material-timepicker'] = {}),global.moment,global.ng.core,global.rxjs,global.ng.animations,global.rxjs.operators,global.ng.platformBrowser,global.ng.forms,global.ng.common));
}(this, (function (exports,moment,core,rxjs,animations,operators,platformBrowser,forms,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var TimePeriod = {
        AM: 'AM',
        PM: 'PM',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var TimeFormat = {
        TWELVE: 'hh:mm a',
        TWENTY_FOUR: 'HH:mm',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$1 = moment;
    var TimeAdapter = /** @class */ (function () {
        function TimeAdapter() {
        }
        /**
         * @param {?} time
         * @param {?=} format
         * @return {?}
         */
        TimeAdapter.formatTime = /**
         * @param {?} time
         * @param {?=} format
         * @return {?}
         */
            function (time, format) {
                if (format === void 0) {
                    format = 12;
                }
                /** @type {?} */
                var timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;
                return moment$1(time, TimeFormat.TWELVE).format(timeFormat);
            };
        /**
         * @param {?} time
         * @return {?}
         */
        TimeAdapter.convertTimeToMoment = /**
         * @param {?} time
         * @return {?}
         */
            function (time) {
                return moment$1(time, TimeFormat.TWELVE);
            };
        /**
         * @param {?} time
         * @param {?=} min
         * @param {?=} max
         * @param {?=} granularity
         * @return {?}
         */
        TimeAdapter.isTimeAvailable = /**
         * @param {?} time
         * @param {?=} min
         * @param {?=} max
         * @param {?=} granularity
         * @return {?}
         */
            function (time, min, max, granularity) {
                if (!time) {
                    return;
                }
                /** @type {?} */
                var convertedTime = this.convertTimeToMoment(time);
                /** @type {?} */
                var isAfter = (min && !max)
                    && convertedTime.isSameOrAfter(min, granularity);
                /** @type {?} */
                var isBefore = (max && !min)
                    && convertedTime.isSameOrBefore(max, granularity);
                /** @type {?} */
                var isBetween = (min && max)
                    && convertedTime.isBetween(min, max, granularity, '[]');
                /** @type {?} */
                var isAvailable = !min && !max;
                return isAfter || isBefore || isBetween || isAvailable;
            };
        /***
         *  Format hour according to time format (12 or 24)
         */
        /**
         *
         *  Format hour according to time format (12 or 24)
         * @param {?} currentHour
         * @param {?} format
         * @param {?} period
         * @return {?}
         */
        TimeAdapter.formatHour = /**
         *
         *  Format hour according to time format (12 or 24)
         * @param {?} currentHour
         * @param {?} format
         * @param {?} period
         * @return {?}
         */
            function (currentHour, format, period) {
                if (format === 24) {
                    return currentHour;
                }
                /** @type {?} */
                var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;
                if (period === TimePeriod.AM && hour === 12) {
                    return 0;
                }
                else if (period === TimePeriod.PM && hour === 24) {
                    return 12;
                }
                return hour;
            };
        return TimeAdapter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$2 = moment;
    /** @type {?} */
    var DEFAULT_HOUR = {
        time: 12,
        angle: 360
    };
    /** @type {?} */
    var DEFAULT_MINUTE = {
        time: 0,
        angle: 360
    };
    var NgxMaterialTimepickerService = /** @class */ (function () {
        function NgxMaterialTimepickerService() {
            this.hourSubject = new rxjs.BehaviorSubject(DEFAULT_HOUR);
            this.minuteSubject = new rxjs.BehaviorSubject(DEFAULT_MINUTE);
            this.periodSubject = new rxjs.BehaviorSubject(TimePeriod.AM);
        }
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "defaultTime", {
            set: /**
             * @private
             * @param {?} time
             * @return {?}
             */ function (time) {
                /** @type {?} */
                var defaultTime = moment$2(time, TimeFormat.TWENTY_FOUR).toDate();
                if (moment$2(defaultTime).isValid()) {
                    this.hour = __assign({}, DEFAULT_HOUR, { time: defaultTime.getHours() });
                    this.minute = __assign({}, DEFAULT_MINUTE, { time: defaultTime.getMinutes() });
                    this.period = ( /** @type {?} */(time.substr(time.length - 2).toUpperCase()));
                }
                else {
                    this.resetTime();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "hour", {
            set: /**
             * @param {?} hour
             * @return {?}
             */ function (hour) {
                this.hourSubject.next(hour);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "selectedHour", {
            get: /**
             * @return {?}
             */ function () {
                return this.hourSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "minute", {
            set: /**
             * @param {?} minute
             * @return {?}
             */ function (minute) {
                this.minuteSubject.next(minute);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "selectedMinute", {
            get: /**
             * @return {?}
             */ function () {
                return this.minuteSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "period", {
            set: /**
             * @param {?} period
             * @return {?}
             */ function (period) {
                this.periodSubject.next(period);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerService.prototype, "selectedPeriod", {
            get: /**
             * @return {?}
             */ function () {
                return this.periodSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} time
         * @param {?} min
         * @param {?} max
         * @param {?} format
         * @return {?}
         */
        NgxMaterialTimepickerService.prototype.setDefaultTimeIfAvailable = /**
         * @param {?} time
         * @param {?} min
         * @param {?} max
         * @param {?} format
         * @return {?}
         */
            function (time, min, max, format) {
                if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes')) {
                    this.defaultTime = TimeAdapter.formatTime(time, format);
                }
            };
        /**
         * @param {?} format
         * @return {?}
         */
        NgxMaterialTimepickerService.prototype.getFullTime = /**
         * @param {?} format
         * @return {?}
         */
            function (format) {
                /** @type {?} */
                var hour = this.hourSubject.getValue().time;
                /** @type {?} */
                var minute = this.minuteSubject.getValue().time;
                /** @type {?} */
                var period = format === 12 ? this.periodSubject.getValue() : '';
                return TimeAdapter.formatTime(hour + ":" + minute + " " + period, format);
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerService.prototype.resetTime = /**
         * @private
         * @return {?}
         */
            function () {
                this.hour = __assign({}, DEFAULT_HOUR);
                this.minute = __assign({}, DEFAULT_MINUTE);
                this.period = TimePeriod.AM;
            };
        NgxMaterialTimepickerService.decorators = [
            { type: core.Injectable }
        ];
        return NgxMaterialTimepickerService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var TimeUnit = {
        HOUR: 0,
        MINUTE: 1,
    };
    TimeUnit[TimeUnit.HOUR] = 'HOUR';
    TimeUnit[TimeUnit.MINUTE] = 'MINUTE';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerEventService = /** @class */ (function () {
        function NgxMaterialTimepickerEventService() {
            this.backdropClickSubject = new rxjs.Subject();
            this.keydownEventSubject = new rxjs.Subject();
        }
        Object.defineProperty(NgxMaterialTimepickerEventService.prototype, "backdropClick", {
            get: /**
             * @return {?}
             */ function () {
                return this.backdropClickSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerEventService.prototype, "keydownEvent", {
            get: /**
             * @return {?}
             */ function () {
                return this.keydownEventSubject.asObservable();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        NgxMaterialTimepickerEventService.prototype.dispatchEvent = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                switch (event.type) {
                    case 'click':
                        this.backdropClickSubject.next(( /** @type {?} */(event)));
                        break;
                    case 'keydown':
                        this.keydownEventSubject.next(( /** @type {?} */(event)));
                        break;
                    default:
                        throw new Error('no such event type');
                }
            };
        NgxMaterialTimepickerEventService.decorators = [
            { type: core.Injectable }
        ];
        return NgxMaterialTimepickerEventService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var AnimationState = {
        ENTER: 'enter',
        LEAVE: 'leave',
    };
    /** @type {?} */
    var ESCAPE = 27;
    var NgxMaterialTimepickerComponent = /** @class */ (function () {
        function NgxMaterialTimepickerComponent(timepickerService, eventService) {
            var _this = this;
            this.timepickerService = timepickerService;
            this.eventService = eventService;
            this.timeUnit = TimeUnit;
            this.activeTimeUnit = TimeUnit.HOUR;
            this.isOpened = false;
            this.isEsc = true;
            this.timeSet = new core.EventEmitter();
            this.closed = new core.EventEmitter();
            this.subscriptions = [];
            this.subscriptions.push(rxjs.merge(this.eventService.backdropClick, this.eventService.keydownEvent.pipe(operators.filter(function (e) { return e.keyCode === ESCAPE && _this.isEsc; })))
                .subscribe(function () { return _this.close(); }));
        }
        Object.defineProperty(NgxMaterialTimepickerComponent.prototype, "minutesGap", {
            get: /**
             * @return {?}
             */ function () {
                return this._minutesGap;
            },
            set: /**
             * @param {?} gap
             * @return {?}
             */ function (gap) {
                gap = Math.floor(gap);
                this._minutesGap = gap <= 59 ? gap : 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerComponent.prototype, "defaultTime", {
            set: /**
             * @param {?} time
             * @return {?}
             */ function (time) {
                this.setDefaultTime(time);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerComponent.prototype, "minTime", {
            get: /**
             * @return {?}
             */ function () {
                return this.timepickerInput && this.timepickerInput.min;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerComponent.prototype, "maxTime", {
            get: /**
             * @return {?}
             */ function () {
                return this.timepickerInput && this.timepickerInput.max;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this.timepickerInput && this.timepickerInput.disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMaterialTimepickerComponent.prototype, "format", {
            get: /**
             * @return {?}
             */ function () {
                return this.timepickerInput && this.timepickerInput.format;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subscriptions.push(this.timepickerService.selectedHour
                    .subscribe(function (hour) { return _this.selectedHour = hour; }));
                this.subscriptions.push(this.timepickerService.selectedMinute
                    .subscribe(function (minute) { return _this.selectedMinute = minute; }));
                this.subscriptions.push(this.timepickerService.selectedPeriod
                    .subscribe(function (period) { return _this.selectedPeriod = period; }));
            };
        /***
         * Register an input with this timepicker.
         * input - The timepicker input to register with this timepicker
         */
        /**
         *
         * Register an input with this timepicker.
         * input - The timepicker input to register with this timepicker
         * @param {?} input
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.registerInput = /**
         *
         * Register an input with this timepicker.
         * input - The timepicker input to register with this timepicker
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (this.timepickerInput) {
                    throw Error('A Timepicker can only be associated with a single input.');
                }
                this.timepickerInput = input;
            };
        /**
         * @param {?} hour
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.onHourChange = /**
         * @param {?} hour
         * @return {?}
         */
            function (hour) {
                this.timepickerService.hour = hour;
            };
        /**
         * @param {?} minute
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.onMinuteChange = /**
         * @param {?} minute
         * @return {?}
         */
            function (minute) {
                this.timepickerService.minute = minute;
            };
        /**
         * @param {?} period
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.changePeriod = /**
         * @param {?} period
         * @return {?}
         */
            function (period) {
                this.timepickerService.period = period;
            };
        /**
         * @param {?} unit
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.changeTimeUnit = /**
         * @param {?} unit
         * @return {?}
         */
            function (unit) {
                this.activeTimeUnit = unit;
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.setTime = /**
         * @return {?}
         */
            function () {
                this.timeSet.next(this.timepickerService.getFullTime(this.format));
                this.close();
            };
        /**
         * @param {?} time
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.setDefaultTime = /**
         * @param {?} time
         * @return {?}
         */
            function (time) {
                this.timepickerService.setDefaultTimeIfAvailable(time, ( /** @type {?} */(this.minTime)), ( /** @type {?} */(this.maxTime)), this.format);
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                this.isOpened = true;
                this.animationState = AnimationState.ENTER;
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.animationState = AnimationState.LEAVE;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.animationDone = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {
                    this.isOpened = false;
                    this.activeTimeUnit = TimeUnit.HOUR;
                    this.closed.next();
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.onKeydown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.eventService.dispatchEvent(e);
                e.stopPropagation();
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            };
        NgxMaterialTimepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker',
                        template: "<div class=\"timepicker-backdrop-overlay\" *ngIf=\"isOpened\" overlay></div>\n<div class=\"timepicker-overlay\" *ngIf=\"isOpened\">\n    <div class=\"timepicker\" [@timepicker]=\"animationState\" (@timepicker.done)=\"animationDone($event)\" tabindex=\"0\">\n        <header class=\"timepicker__header\">\n            <ngx-material-timepicker-dial [format]=\"format\" [hour]=\"selectedHour?.time\"\n                                          [minute]=\"selectedMinute?.time\"\n                                          [period]=\"selectedPeriod\" [activeTimeUnit]=\"activeTimeUnit\"\n                                          [minTime]=\"minTime\" [maxTime]=\"maxTime\"\n                                          [isEditable]=\"enableKeyboardInput\"\n                                          [minutesGap]=\"minutesGap\"\n                                          (periodChanged)=\"changePeriod($event)\"\n                                          (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                          (hourChanged)=\"onHourChange($event)\"\n                                          (minuteChanged)=\"onMinuteChange($event)\"\n            ></ngx-material-timepicker-dial>\n        </header>\n        <div class=\"timepicker__main-content\">\n            <div class=\"timepicker__body\" [ngSwitch]=\"activeTimeUnit\">\n                <div *ngSwitchCase=\"timeUnit.HOUR\">\n                    <ngx-material-timepicker-24-hours-face *ngIf=\"format === 24;else ampmHours\"\n                                                           (hourChange)=\"onHourChange($event)\"\n                                                           [selectedHour]=\"selectedHour\"\n                                                           [minTime]=\"minTime\"\n                                                           [maxTime]=\"maxTime\"\n                                                           [format]=\"format\"\n                                                           (hourSelected)=\"changeTimeUnit(timeUnit.MINUTE)\"></ngx-material-timepicker-24-hours-face>\n                    <ng-template #ampmHours>\n                        <ngx-material-timepicker-12-hours-face\n                            (hourChange)=\"onHourChange($event)\"\n                            [selectedHour]=\"selectedHour\"\n                            [period]=\"selectedPeriod\"\n                            [minTime]=\"minTime\"\n                            [maxTime]=\"maxTime\"\n                            (hourSelected)=\"changeTimeUnit(timeUnit.MINUTE)\"></ngx-material-timepicker-12-hours-face>\n                    </ng-template>\n                </div>\n                <ngx-material-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\n                                                      [selectedMinute]=\"selectedMinute\"\n                                                      [selectedHour]=\"selectedHour?.time\"\n                                                      [minTime]=\"minTime\"\n                                                      [maxTime]=\"maxTime\"\n                                                      [format]=\"format\"\n                                                      [period]=\"selectedPeriod\"\n                                                      [minutesGap]=\"minutesGap\"\n                                                      (minuteChange)=\"onMinuteChange($event)\"></ngx-material-timepicker-minutes-face>\n            </div>\n            <div class=\"timepicker__actions\">\n                <div (click)=\"close()\">\n                    <!--suppress HtmlUnknownAttribute -->\n                    <ng-container *ngTemplateOutlet=\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\"></ng-container>\n                </div>\n                <div (click)=\"setTime()\">\n                    <!--suppress HtmlUnknownAttribute -->\n                    <ng-container\n                        *ngTemplateOutlet=\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\"></ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<ng-template #cancelBtnDefault>\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\n</ng-template>\n<ng-template #confirmBtnDefault>\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\n</ng-template>\n",
                        animations: [
                            animations.trigger('timepicker', [
                                animations.transition("* => " + AnimationState.ENTER, [
                                    animations.style({ transform: 'translateY(-30%)' }),
                                    animations.animate('0.2s ease-out', animations.style({ transform: 'translateY(0)' }))
                                ]),
                                animations.transition(AnimationState.ENTER + " => " + AnimationState.LEAVE, [
                                    animations.style({ transform: 'translateY(0)', opacity: 1 }),
                                    animations.animate('0.2s ease-out', animations.style({ transform: 'translateY(-30%)', opacity: 0 }))
                                ])
                            ])
                        ],
                        providers: [NgxMaterialTimepickerService],
                        styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{background-color:#00bfff;padding:15px 30px}.timepicker__body{background-color:#fff;padding:15px 5px;display:flex;justify-content:center;align-items:center}.timepicker__actions{display:flex;justify-content:flex-end;padding:15px;background-color:#fff}@media (max-width:1023px) and (orientation:landscape){.timepicker{display:flex;width:515px}.timepicker__header{display:flex;align-items:center}.timepicker__main-content{display:flex;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}}"]
                    }] }
        ];
        /** @nocollapse */
        NgxMaterialTimepickerComponent.ctorParameters = function () {
            return [
                { type: NgxMaterialTimepickerService },
                { type: NgxMaterialTimepickerEventService }
            ];
        };
        NgxMaterialTimepickerComponent.propDecorators = {
            cancelBtnTmpl: [{ type: core.Input }],
            confirmBtnTmpl: [{ type: core.Input }],
            isEsc: [{ type: core.Input, args: ['ESC',] }],
            enableKeyboardInput: [{ type: core.Input }],
            minutesGap: [{ type: core.Input }],
            defaultTime: [{ type: core.Input }],
            timeSet: [{ type: core.Output }],
            closed: [{ type: core.Output }],
            onKeydown: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return NgxMaterialTimepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StyleSanitizerPipe = /** @class */ (function () {
        function StyleSanitizerPipe(domSanitizer) {
            this.domSanitizer = domSanitizer;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        StyleSanitizerPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (!value) {
                    return value;
                }
                return this.domSanitizer.bypassSecurityTrustStyle(value);
            };
        StyleSanitizerPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'styleSanitizer'
                    },] }
        ];
        /** @nocollapse */
        StyleSanitizerPipe.ctorParameters = function () {
            return [
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return StyleSanitizerPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moment$3 = moment;
    var TimepickerTime;
    (function (TimepickerTime) {
        /**
         * @param {?} format
         * @return {?}
         */
        function getHours(format) {
            return Array(format).fill(1).map(function (v, i) {
                /** @type {?} */
                var angleStep = 30;
                /** @type {?} */
                var time = v + i;
                /** @type {?} */
                var angle = angleStep * time;
                return { time: time === 24 ? 0 : time, angle: angle };
            });
        }
        TimepickerTime.getHours = getHours;
        /**
         * @param {?} hours
         * @param {?} config
         * @return {?}
         */
        function disableHours(hours, config) {
            if (config.min || config.max) {
                return hours.map(function (value) {
                    /** @type {?} */
                    var hour = config.format === 24 ? value.time : TimeAdapter.formatHour(+value.time, config.format, config.period);
                    /** @type {?} */
                    var currentTime = moment$3().hour(+hour).format(TimeFormat.TWELVE);
                    return __assign({}, value, { disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours') });
                });
            }
            return hours;
        }
        TimepickerTime.disableHours = disableHours;
        /**
         * @param {?=} gap
         * @return {?}
         */
        function getMinutes(gap) {
            if (gap === void 0) {
                gap = 1;
            }
            /** @type {?} */
            var minutesCount = 60;
            /** @type {?} */
            var angleStep = 360 / minutesCount;
            /** @type {?} */
            var minutes = [];
            for (var i = 0; i < minutesCount; i++) {
                /** @type {?} */
                var angle = angleStep * i;
                if (i % gap === 0) {
                    minutes.push({ time: i, angle: angle !== 0 ? angle : 360 });
                }
            }
            return minutes;
        }
        TimepickerTime.getMinutes = getMinutes;
        /**
         * @param {?} minutes
         * @param {?} selectedHour
         * @param {?} config
         * @return {?}
         */
        function disableMinutes(minutes, selectedHour, config) {
            if (config.min || config.max) {
                /** @type {?} */
                var hour_1 = TimeAdapter.formatHour(selectedHour, config.format, config.period);
                return minutes.map(function (value) {
                    /** @type {?} */
                    var currentTime = moment$3().hour(hour_1).minute(+value.time).format(TimeFormat.TWELVE);
                    return __assign({}, value, { disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes') });
                });
            }
            return minutes;
        }
        TimepickerTime.disableMinutes = disableMinutes;
    })(TimepickerTime || (TimepickerTime = {}));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerMinutesFaceComponent = /** @class */ (function () {
        function NgxMaterialTimepickerMinutesFaceComponent() {
            this.minutesList = [];
            this.timeUnit = TimeUnit;
            this.minuteChange = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxMaterialTimepickerMinutesFaceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['period'] && changes['period'].currentValue) {
                    /** @type {?} */
                    var minutes = TimepickerTime.getMinutes(this.minutesGap);
                    this.minutesList = TimepickerTime.disableMinutes(minutes, this.selectedHour, {
                        min: this.minTime,
                        max: this.maxTime,
                        format: this.format,
                        period: this.period
                    });
                }
            };
        NgxMaterialTimepickerMinutesFaceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-minutes-face',
                        template: "<ngx-material-timepicker-face [faceTime]=\"minutesList\" [selectedTime]=\"selectedMinute\"\n                              [minutesGap]=\"minutesGap\"\n                              (timeChange)=\"minuteChange.next($event)\" [unit]=\"timeUnit.MINUTE\"></ngx-material-timepicker-face>\n"
                    }] }
        ];
        NgxMaterialTimepickerMinutesFaceComponent.propDecorators = {
            selectedMinute: [{ type: core.Input }],
            selectedHour: [{ type: core.Input }],
            period: [{ type: core.Input }],
            minTime: [{ type: core.Input }],
            maxTime: [{ type: core.Input }],
            format: [{ type: core.Input }],
            minutesGap: [{ type: core.Input }],
            minuteChange: [{ type: core.Output }]
        };
        return NgxMaterialTimepickerMinutesFaceComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CLOCK_HAND_STYLES = {
        small: {
            height: '75px',
            top: 'calc(50% - 75px)'
        },
        large: {
            height: '103px',
            top: 'calc(50% - 103px)'
        }
    };
    var NgxMaterialTimepickerFaceComponent = /** @class */ (function () {
        function NgxMaterialTimepickerFaceComponent() {
            this.timeUnit = TimeUnit;
            this.innerClockFaceSize = 85;
            this.timeChange = new core.EventEmitter();
            this.timeSelected = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.setClockHandPosition();
                this.addTouchEvents();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                /** @type {?} */
                var faceTimeChanges = changes['faceTime'];
                /** @type {?} */
                var selectedTimeChanges = changes['selectedTime'];
                if ((faceTimeChanges && faceTimeChanges.currentValue)
                    && (selectedTimeChanges && selectedTimeChanges.currentValue)) {
                    /* Set time according to passed an input value */
                    this.selectedTime = this.faceTime.find(function (time) { return time.time === _this.selectedTime.time; });
                }
                if (selectedTimeChanges && selectedTimeChanges.currentValue) {
                    this.setClockHandPosition();
                }
                if (faceTimeChanges && faceTimeChanges.currentValue) {
                    // To avoid an error ExpressionChangedAfterItHasBeenCheckedError
                    setTimeout(function () { return _this.selectAvailableTime(); });
                }
            };
        /**
         * @param {?} _
         * @param {?} time
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.trackByTime = /**
         * @param {?} _
         * @param {?} time
         * @return {?}
         */
            function (_, time) {
                return time.time;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.onMousedown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.preventDefault();
                this.isStarted = true;
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.selectTime = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {
                    return;
                }
                /** @type {?} */
                var clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();
                /* Get x0 and y0 of the circle */
                /** @type {?} */
                var centerX = clockFaceCords.left + clockFaceCords.width / 2;
                /** @type {?} */
                var centerY = clockFaceCords.top + clockFaceCords.height / 2;
                /* Counting the arctangent and convert it to from radian to deg */
                /** @type {?} */
                var arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;
                /* Get angle according to quadrant */
                /** @type {?} */
                var circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);
                /* Check if selected time from the inner clock face (24 hours format only) */
                /** @type {?} */
                var isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);
                /* Round angle according to angle step */
                /** @type {?} */
                var angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;
                /** @type {?} */
                var roundedAngle = isInnerClockChosen
                    ? roundAngle(circleAngle, angleStep) + 360
                    : roundAngle(circleAngle, angleStep);
                /** @type {?} */
                var selectedTime = this.faceTime.find(function (val) { return val.angle === roundedAngle; });
                if (selectedTime && !selectedTime.disabled) {
                    this.timeChange.next(selectedTime);
                    /* To let know whether user ended interaction with clock face */
                    if (!this.isStarted) {
                        this.timeSelected.next();
                    }
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.onMouseup = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.preventDefault();
                this.isStarted = false;
            };
        /**
         * @param {?} hour
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.isHourSelected = /**
         * @param {?} hour
         * @return {?}
         */
            function (hour) {
                return (hour === this.selectedTime.time) && !this.isClockFaceDisabled;
            };
        /**
         * @param {?} minute
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.isMinuteSelected = /**
         * @param {?} minute
         * @return {?}
         */
            function (minute) {
                return ((this.selectedTime.time === minute) && (minute % (this.minutesGap || 5) === 0)) && !this.isClockFaceDisabled;
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeTouchEvents();
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.addTouchEvents = /**
         * @private
         * @return {?}
         */
            function () {
                this.touchStartHandler = this.onMousedown.bind(this);
                this.touchEndHandler = this.onMouseup.bind(this);
                this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);
                this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.removeTouchEvents = /**
         * @private
         * @return {?}
         */
            function () {
                this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);
                this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.setClockHandPosition = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.format === 24) {
                    if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {
                        this.decreaseClockHand();
                    }
                    else {
                        this.increaseClockHand();
                    }
                }
                this.clockHand.nativeElement.style.transform = "rotate(" + this.selectedTime.angle + "deg)";
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.selectAvailableTime = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var currentTime = this.faceTime.find(function (time) { return _this.selectedTime.time === time.time; });
                this.isClockFaceDisabled = this.faceTime.every(function (time) { return time.disabled; });
                if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {
                    /** @type {?} */
                    var availableTime = this.faceTime.find(function (time) { return !time.disabled; });
                    this.timeChange.next(availableTime);
                }
            };
        /**
         * @private
         * @param {?} x0
         * @param {?} y0
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.isInnerClockFace = /**
         * @private
         * @param {?} x0
         * @param {?} y0
         * @param {?} x
         * @param {?} y
         * @return {?}
         */
            function (x0, y0, x, y) {
                /* Detect whether time from the inner clock face or not (24 format only) */
                return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.decreaseClockHand = /**
         * @private
         * @return {?}
         */
            function () {
                this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;
                this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;
            };
        /**
         * @private
         * @return {?}
         */
        NgxMaterialTimepickerFaceComponent.prototype.increaseClockHand = /**
         * @private
         * @return {?}
         */
            function () {
                this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;
                this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;
            };
        NgxMaterialTimepickerFaceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-face',
                        template: "<div class=\"clock-face\" #clockFace>\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\n        <div class=\"clock-face__number clock-face__number--outer\"\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n             *ngFor=\"let time of faceTime.slice(0, 12); trackBy: trackByTime\">\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n                  [ngClass]=\"{'active': isHourSelected(time.time), 'disabled': time.disabled}\">{{time.time}}</span>\n        </div>\n        <div class=\"clock-face__inner\" *ngIf=\"faceTime.length > 12\"\n             [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\">\n            <div class=\"clock-face__number clock-face__number--inner\"\n                 [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n                 [style.height.px]=\"innerClockFaceSize\"\n                 *ngFor=\"let time of faceTime.slice(12, 24); trackBy: trackByTime\">\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n                  [ngClass]=\"{'active': isHourSelected(time.time), 'disabled': time.disabled}\">\n                {{time.time === 0 ? '00' : time.time}}</span>\n            </div>\n        </div>\n    </div>\n\n    <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\n          #clockHand [hidden]=\"isClockFaceDisabled\"></span>\n</div>\n<ng-template #minutesFace>\n    <div class=\"clock-face__container\">\n        <div class=\"clock-face__number clock-face__number--outer\"\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\n          [ngClass]=\"{'active': isMinuteSelected(time.time), 'disabled': time.disabled}\">\n\t{{time.time === 0 ? '00' : time.time | minutesFormatter: minutesGap}}</span>\n        </div>\n    </div>\n</ng-template>\n",
                        styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:flex;justify-content:center;padding:20px;box-sizing:border-box}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;-webkit-transform-origin:0 100%;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}.clock-face__number--inner>span{font-size:14px;color:#929292}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:flex;justify-content:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__number>span.disabled{color:#c5c5c5}.clock-face__clock-hand{height:103px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}"]
                    }] }
        ];
        NgxMaterialTimepickerFaceComponent.propDecorators = {
            faceTime: [{ type: core.Input }],
            selectedTime: [{ type: core.Input }],
            unit: [{ type: core.Input }],
            format: [{ type: core.Input }],
            minutesGap: [{ type: core.Input }],
            timeChange: [{ type: core.Output }],
            timeSelected: [{ type: core.Output }],
            clockFace: [{ type: core.ViewChild, args: ['clockFace',] }],
            clockHand: [{ type: core.ViewChild, args: ['clockHand',] }],
            onMousedown: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }],
            selectTime: [{ type: core.HostListener, args: ['click', ['$event'],] }, { type: core.HostListener, args: ['touchmove', ['$event.changedTouches[0]'],] }, { type: core.HostListener, args: ['touchend', ['$event.changedTouches[0]'],] }, { type: core.HostListener, args: ['mousemove', ['$event'],] }],
            onMouseup: [{ type: core.HostListener, args: ['mouseup', ['$event'],] }]
        };
        return NgxMaterialTimepickerFaceComponent;
    }());
    /**
     * @param {?} angle
     * @param {?} step
     * @return {?}
     */
    function roundAngle(angle, step) {
        return Math.round(angle / step) * step;
    }
    /**
     * @param {?} x0
     * @param {?} y0
     * @param {?} x
     * @param {?} y
     * @param {?} currentAngle
     * @return {?}
     */
    function countAngleByCords(x0, y0, x, y, currentAngle) {
        if (y > y0 && x >= x0) { // II quarter
            return 180 - currentAngle;
        }
        else if (y > y0 && x < x0) { // III quarter
            return 180 + currentAngle;
        }
        else if (y < y0 && x < x0) { // IV quarter
            return 360 - currentAngle;
        }
        else { // I quarter
            return currentAngle;
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TimeFormatterPipe = /** @class */ (function () {
        function TimeFormatterPipe() {
        }
        /**
         * @param {?} time
         * @param {?} timeUnit
         * @return {?}
         */
        TimeFormatterPipe.prototype.transform = /**
         * @param {?} time
         * @param {?} timeUnit
         * @return {?}
         */
            function (time, timeUnit) {
                if (time === undefined) {
                    return time;
                }
                switch (timeUnit) {
                    case TimeUnit.HOUR:
                        return moment.utc(time * 3600 * 1000).format('HH');
                    case TimeUnit.MINUTE:
                        return moment.utc(time * 60 * 1000).format('mm');
                    default:
                        throw new Error('no such time unit');
                }
            };
        TimeFormatterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'timeFormatter'
                    },] }
        ];
        return TimeFormatterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerButtonComponent = /** @class */ (function () {
        function NgxMaterialTimepickerButtonComponent() {
        }
        NgxMaterialTimepickerButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-button',
                        template: "<button class=\"timepicker-button\" type=\"button\">\r\n  <span><ng-content></ng-content></span>\r\n</button>\r\n",
                        styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;color:#00bfff;text-align:center;transition:all 450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}"]
                    }] }
        ];
        return NgxMaterialTimepickerButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(function () { return TimepickerDirective; }),
        multi: true
    };
    var TimepickerDirective = /** @class */ (function () {
        function TimepickerDirective(elementRef) {
            this.elementRef = elementRef;
            this._format = 12;
            this._value = '';
            this.timepickerSubscriptions = [];
            this.onTouched = function () { };
            this.onChange = function () { };
        }
        Object.defineProperty(TimepickerDirective.prototype, "format", {
            get: /**
             * @return {?}
             */ function () {
                return this._format;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._format = value === 24 ? 24 : 12;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimepickerDirective.prototype, "min", {
            get: /**
             * @return {?}
             */ function () {
                return this._min;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (typeof value === 'string') {
                    this._min = TimeAdapter.convertTimeToMoment(value);
                    return;
                }
                this._min = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimepickerDirective.prototype, "max", {
            get: /**
             * @return {?}
             */ function () {
                return this._max;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (typeof value === 'string') {
                    this._max = TimeAdapter.convertTimeToMoment(value);
                    return;
                }
                this._max = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimepickerDirective.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (!value) {
                    this._value = '';
                    this.updateInputValue();
                    return;
                }
                /** @type {?} */
                var time = TimeAdapter.formatTime(value, this._format);
                if (TimeAdapter.isTimeAvailable(time, ( /** @type {?} */(this._min)), ( /** @type {?} */(this._max)), 'minutes')) {
                    this._value = time;
                    this.updateInputValue();
                    return;
                }
                console.warn('Selected time doesn\'t match min or max value');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimepickerDirective.prototype, "timepicker", {
            set: /**
             * @param {?} picker
             * @return {?}
             */ function (picker) {
                this.registerTimepicker(picker);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TimepickerDirective.prototype, "defaultTime", {
            set: /**
             * @private
             * @param {?} time
             * @return {?}
             */ function (time) {
                this._timepicker.setDefaultTime(time);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        TimepickerDirective.prototype.onInput = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.onChange(value);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TimepickerDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['value'] && changes['value'].currentValue) {
                    this.defaultTime = changes['value'].currentValue;
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        TimepickerDirective.prototype.onClick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.disableClick) {
                    this._timepicker.open();
                    event.stopPropagation();
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TimepickerDirective.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.defaultTime = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TimepickerDirective.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        TimepickerDirective.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        TimepickerDirective.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /**
         * @return {?}
         */
        TimepickerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.timepickerSubscriptions.forEach(function (s) { return s.unsubscribe(); });
            };
        /**
         * @private
         * @param {?} picker
         * @return {?}
         */
        TimepickerDirective.prototype.registerTimepicker = /**
         * @private
         * @param {?} picker
         * @return {?}
         */
            function (picker) {
                var _this = this;
                if (picker) {
                    this._timepicker = picker;
                    this._timepicker.registerInput(this);
                    this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe(function (time) {
                        _this.value = time;
                        _this.onChange(_this._value);
                        _this.onTouched();
                    }));
                    this.timepickerSubscriptions.push(this._timepicker.closed.subscribe(function () { return _this.defaultTime = _this._value; }));
                }
                else {
                    throw new Error('NgxMaterialTimepickerComponent is not defined.' +
                        ' Please make sure you passed the timepicker to ngxTimepicker directive');
                }
            };
        /**
         * @private
         * @return {?}
         */
        TimepickerDirective.prototype.updateInputValue = /**
         * @private
         * @return {?}
         */
            function () {
                this.elementRef.nativeElement.value = this.value;
            };
        TimepickerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxTimepicker]',
                        providers: [VALUE_ACCESSOR],
                        host: {
                            '[disabled]': 'disabled',
                            '(input)': 'onInput($event.target.value)',
                            '(blur)': 'onTouched()',
                        },
                    },] }
        ];
        /** @nocollapse */
        TimepickerDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        TimepickerDirective.propDecorators = {
            format: [{ type: core.Input }],
            min: [{ type: core.Input }],
            max: [{ type: core.Input }],
            value: [{ type: core.Input }],
            timepicker: [{ type: core.Input, args: ['ngxTimepicker',] }],
            disabled: [{ type: core.Input }],
            disableClick: [{ type: core.Input }],
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return TimepickerDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OverlayDirective = /** @class */ (function () {
        function OverlayDirective(eventService) {
            this.eventService = eventService;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        OverlayDirective.prototype.onClick = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.eventService.dispatchEvent(e);
                e.preventDefault();
            };
        OverlayDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[overlay]'
                    },] }
        ];
        /** @nocollapse */
        OverlayDirective.ctorParameters = function () {
            return [
                { type: NgxMaterialTimepickerEventService }
            ];
        };
        OverlayDirective.propDecorators = {
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return OverlayDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* To override a default toggle icon */
    var NgxMaterialTimepickerToggleIconDirective = /** @class */ (function () {
        function NgxMaterialTimepickerToggleIconDirective() {
        }
        NgxMaterialTimepickerToggleIconDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngxMaterialTimepickerToggleIcon]' },] }
        ];
        return NgxMaterialTimepickerToggleIconDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerToggleComponent = /** @class */ (function () {
        function NgxMaterialTimepickerToggleComponent() {
        }
        Object.defineProperty(NgxMaterialTimepickerToggleComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled === undefined ? this.timepicker.disabled : this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._disabled = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        NgxMaterialTimepickerToggleComponent.prototype.open = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.timepicker) {
                    this.timepicker.open();
                    event.stopPropagation();
                }
            };
        NgxMaterialTimepickerToggleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-toggle',
                        template: "<button class=\"ngx-material-timepicker-toggle\" (click)=\"open($event)\" [disabled]=\"disabled\" type=\"button\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" *ngIf=\"!customIcon\">\r\n        <path\r\n            d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"/>\r\n    </svg>\r\n\r\n    <ng-content select=\"[ngxMaterialTimepickerToggleIcon]\"></ng-content>\r\n</button>\r\n",
                        styles: [".ngx-material-timepicker-toggle{display:flex;justify-content:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle:focus{background-color:rgba(0,0,0,.07)}"]
                    }] }
        ];
        NgxMaterialTimepickerToggleComponent.propDecorators = {
            timepicker: [{ type: core.Input, args: ['for',] }],
            disabled: [{ type: core.Input }],
            customIcon: [{ type: core.ContentChild, args: [NgxMaterialTimepickerToggleIconDirective,] }]
        };
        return NgxMaterialTimepickerToggleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerHoursFace = /** @class */ (function () {
        function NgxMaterialTimepickerHoursFace(format) {
            this.hourChange = new core.EventEmitter();
            this.hourSelected = new core.EventEmitter();
            this.hoursList = [];
            this.hoursList = TimepickerTime.getHours(format);
        }
        NgxMaterialTimepickerHoursFace.propDecorators = {
            selectedHour: [{ type: core.Input }],
            minTime: [{ type: core.Input }],
            maxTime: [{ type: core.Input }],
            format: [{ type: core.Input }],
            hourChange: [{ type: core.Output }],
            hourSelected: [{ type: core.Output }]
        };
        return NgxMaterialTimepickerHoursFace;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepicker12HoursFaceComponent = /** @class */ (function (_super) {
        __extends(NgxMaterialTimepicker12HoursFaceComponent, _super);
        function NgxMaterialTimepicker12HoursFaceComponent() {
            return _super.call(this, 12) || this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxMaterialTimepicker12HoursFaceComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['period'] && changes['period'].currentValue) {
                    this.hoursList = TimepickerTime.disableHours(this.hoursList, {
                        min: this.minTime,
                        max: this.maxTime,
                        format: this.format,
                        period: this.period
                    });
                }
            };
        NgxMaterialTimepicker12HoursFaceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-12-hours-face',
                        template: "<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\"\n                              (timeChange)=\"hourChange.next($event)\" (timeSelected)=\"hourSelected.next()\"></ngx-material-timepicker-face>\n"
                    }] }
        ];
        /** @nocollapse */
        NgxMaterialTimepicker12HoursFaceComponent.ctorParameters = function () { return []; };
        NgxMaterialTimepicker12HoursFaceComponent.propDecorators = {
            period: [{ type: core.Input }]
        };
        return NgxMaterialTimepicker12HoursFaceComponent;
    }(NgxMaterialTimepickerHoursFace));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepicker24HoursFaceComponent = /** @class */ (function (_super) {
        __extends(NgxMaterialTimepicker24HoursFaceComponent, _super);
        function NgxMaterialTimepicker24HoursFaceComponent() {
            return _super.call(this, 24) || this;
        }
        /**
         * @return {?}
         */
        NgxMaterialTimepicker24HoursFaceComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.hoursList = TimepickerTime.disableHours(this.hoursList, {
                    min: this.minTime,
                    max: this.maxTime,
                    format: this.format
                });
            };
        NgxMaterialTimepicker24HoursFaceComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-24-hours-face',
                        template: "<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\" [format]=\"format\"\n                              (timeChange)=\"hourChange.next($event)\"\n                              (timeSelected)=\"hourSelected.next()\"></ngx-material-timepicker-face>\n"
                    }] }
        ];
        /** @nocollapse */
        NgxMaterialTimepicker24HoursFaceComponent.ctorParameters = function () { return []; };
        return NgxMaterialTimepicker24HoursFaceComponent;
    }(NgxMaterialTimepickerHoursFace));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerDialComponent = /** @class */ (function () {
        function NgxMaterialTimepickerDialComponent() {
            this.timeUnit = TimeUnit;
            this.periodChanged = new core.EventEmitter();
            this.timeUnitChanged = new core.EventEmitter();
            this.hourChanged = new core.EventEmitter();
            this.minuteChanged = new core.EventEmitter();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxMaterialTimepickerDialComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['period'] && changes['period'].currentValue
                    || changes['format'] && changes['format'].currentValue) {
                    /** @type {?} */
                    var hours = TimepickerTime.getHours(this.format);
                    this.hours = TimepickerTime.disableHours(hours, {
                        min: this.minTime,
                        max: this.maxTime,
                        format: this.format,
                        period: this.period
                    });
                }
                if (changes['period'] && changes['period'].currentValue
                    || changes['hour'] && changes['hour'].currentValue) {
                    /** @type {?} */
                    var minutes = TimepickerTime.getMinutes(this.minutesGap);
                    this.minutes = TimepickerTime.disableMinutes(minutes, +this.hour, {
                        min: this.minTime,
                        max: this.maxTime,
                        format: this.format,
                        period: this.period
                    });
                }
            };
        /**
         * @param {?} unit
         * @return {?}
         */
        NgxMaterialTimepickerDialComponent.prototype.changeTimeUnit = /**
         * @param {?} unit
         * @return {?}
         */
            function (unit) {
                this.timeUnitChanged.next(unit);
            };
        /**
         * @param {?} period
         * @return {?}
         */
        NgxMaterialTimepickerDialComponent.prototype.changePeriod = /**
         * @param {?} period
         * @return {?}
         */
            function (period) {
                this.periodChanged.next(period);
            };
        /**
         * @param {?} hour
         * @return {?}
         */
        NgxMaterialTimepickerDialComponent.prototype.changeHour = /**
         * @param {?} hour
         * @return {?}
         */
            function (hour) {
                this.hourChanged.next(hour);
            };
        /**
         * @param {?} minute
         * @return {?}
         */
        NgxMaterialTimepickerDialComponent.prototype.changeMinute = /**
         * @param {?} minute
         * @return {?}
         */
            function (minute) {
                this.minuteChanged.next(minute);
            };
        NgxMaterialTimepickerDialComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-dial',
                        template: "<div class=\"timepicker-dial\">\n    <div class=\"timepicker-dial__time\">\n        <ngx-material-timepicker-dial-control [timeList]=\"hours\" [time]=\"hour\" [timeUnit]=\"timeUnit.HOUR\"\n                                              [isActive]=\"activeTimeUnit === timeUnit.HOUR\"\n                                              [isEditable]=\"isEditable\"\n                                              (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                              (timeChanged)=\"changeHour($event)\">\n\n        </ngx-material-timepicker-dial-control>\n        <span>:</span>\n        <ngx-material-timepicker-dial-control [timeList]=\"minutes\" [time]=\"minute\" [timeUnit]=\"timeUnit.MINUTE\"\n                                              [isActive]=\"activeTimeUnit === timeUnit.MINUTE\"\n                                              [isEditable]=\"isEditable\"\n                                              (timeUnitChanged)=\"changeTimeUnit($event)\"\n                                              (timeChanged)=\"changeMinute($event)\">\n\n        </ngx-material-timepicker-dial-control>\n    </div>\n    <ngx-material-timepicker-period class=\"timepicker-dial__period\" *ngIf=\"format !== 24\"\n                                    [selectedPeriod]=\"period\" [activeTimeUnit]=\"activeTimeUnit\"\n                                    [maxTime]=\"maxTime\" [minTime]=\"minTime\" [format]=\"format\"\n                                    [hours]=\"hours\" [minutes]=\"minutes\" [selectedHour]=\"hour\"\n                                    (periodChanged)=\"changePeriod($event)\"></ngx-material-timepicker-period>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-dial{display:flex;align-items:center;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__period{display:block;margin-left:10px}@media (max-width:1023px) and (orientation:landscape){.timepicker-dial{flex-direction:column}.timepicker-dial__period{margin-left:0}}"]
                    }] }
        ];
        NgxMaterialTimepickerDialComponent.propDecorators = {
            hour: [{ type: core.Input }],
            minute: [{ type: core.Input }],
            format: [{ type: core.Input }],
            period: [{ type: core.Input }],
            activeTimeUnit: [{ type: core.Input }],
            minTime: [{ type: core.Input }],
            maxTime: [{ type: core.Input }],
            isEditable: [{ type: core.Input }],
            minutesGap: [{ type: core.Input }],
            periodChanged: [{ type: core.Output }],
            timeUnitChanged: [{ type: core.Output }],
            hourChanged: [{ type: core.Output }],
            minuteChanged: [{ type: core.Output }]
        };
        return NgxMaterialTimepickerDialComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerDialControlComponent = /** @class */ (function () {
        function NgxMaterialTimepickerDialControlComponent() {
            this.timeUnitChanged = new core.EventEmitter();
            this.timeChanged = new core.EventEmitter();
        }
        Object.defineProperty(NgxMaterialTimepickerDialControlComponent.prototype, "selectedTime", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                var _this = this;
                if (!!this.time) {
                    return this.timeList.find(function (t) { return t.time === +_this.time; });
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxMaterialTimepickerDialControlComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['time'] && (changes['time'].currentValue !== undefined)) {
                    if (this.isEditable && !changes['time'].firstChange) {
                        return;
                    }
                    this.time = new TimeFormatterPipe().transform(+changes['time'].currentValue, this.timeUnit);
                }
            };
        /**
         * @param {?} event
         * @param {?} unit
         * @return {?}
         */
        NgxMaterialTimepickerDialControlComponent.prototype.saveTimeAndChangeTimeUnit = /**
         * @param {?} event
         * @param {?} unit
         * @return {?}
         */
            function (event, unit) {
                event.preventDefault();
                this.previousTime = this.time;
                this.timeUnitChanged.next(unit);
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerDialControlComponent.prototype.updateTime = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var time = this.selectedTime;
                if (time) {
                    this.timeChanged.next(time);
                    this.previousTime = time.time;
                }
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerDialControlComponent.prototype.formatTime = /**
         * @return {?}
         */
            function () {
                if (this.isEditable) {
                    /** @type {?} */
                    var time = this.time || this.previousTime;
                    this.time = new TimeFormatterPipe().transform(+time, this.timeUnit);
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        NgxMaterialTimepickerDialControlComponent.prototype.onKeyDown = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                /** @type {?} */
                var char = String.fromCharCode(e.keyCode);
                if ((!isInputAllowed(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {
                    e.preventDefault();
                }
                if (isInputAllowed(e)) {
                    this.changeTimeByArrow(e.keyCode);
                }
            };
        /**
         * @private
         * @param {?} keyCode
         * @return {?}
         */
        NgxMaterialTimepickerDialControlComponent.prototype.changeTimeByArrow = /**
         * @private
         * @param {?} keyCode
         * @return {?}
         */
            function (keyCode) {
                /** @type {?} */
                var ARROW_UP = 38;
                /** @type {?} */
                var ARROW_DOWN = 40;
                /** @type {?} */
                var time;
                if (keyCode === ARROW_UP) {
                    time = String(+this.time + 1);
                }
                else if (keyCode === ARROW_DOWN) {
                    time = String(+this.time - 1);
                }
                if (!isTimeUnavailable(time, this.timeList)) {
                    this.time = time;
                    this.updateTime();
                }
            };
        NgxMaterialTimepickerDialControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-dial-control',
                        template: "<!--suppress HtmlFormInputWithoutLabel -->\n<input class=\"timepicker-dial__control timepicker-dial__item\"\n       [ngClass]=\"{'timepicker-dial__item_active': isActive, 'timepicker-dial__control_editable': isEditable}\"\n       [(ngModel)]=\"time\" (input)=\"updateTime()\" (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\n       (blur)=\"formatTime()\" [readonly]=\"!isEditable\" [timepickerAutofocus]=\"isActive\" (keydown)=\"onKeyDown($event)\">\n",
                        styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}.timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px}.timepicker-dial__control_editable:focus{color:#00bfff;background-color:#fff;outline:#00bfff}"]
                    }] }
        ];
        NgxMaterialTimepickerDialControlComponent.propDecorators = {
            timeList: [{ type: core.Input }],
            timeUnit: [{ type: core.Input }],
            time: [{ type: core.Input }],
            isActive: [{ type: core.Input }],
            isEditable: [{ type: core.Input }],
            timeUnitChanged: [{ type: core.Output }],
            timeChanged: [{ type: core.Output }]
        };
        return NgxMaterialTimepickerDialControlComponent;
    }());
    /**
     * @param {?} e
     * @return {?}
     */
    function isInputAllowed(e) {
        // Allow: backspace, delete, tab, escape, enter
        if ([46, 8, 9, 27, 13].some(function (n) { return n === e.keyCode; }) ||
            // Allow: Ctrl/cmd+A
            (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: Ctrl/cmd+C
            (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: Ctrl/cmd+X
            (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, up, down
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            return true;
        }
        return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));
    }
    /**
     * @param {?} currentTime
     * @param {?} nextTime
     * @param {?} timeList
     * @return {?}
     */
    function isTimeDisabledToChange(currentTime, nextTime, timeList) {
        /** @type {?} */
        var isNumber = /\d/.test(nextTime);
        if (isNumber) {
            /** @type {?} */
            var time = currentTime + nextTime;
            return isTimeUnavailable(time, timeList);
        }
    }
    /**
     * @param {?} time
     * @param {?} timeList
     * @return {?}
     */
    function isTimeUnavailable(time, timeList) {
        /** @type {?} */
        var selectedTime = timeList.find(function (value) { return value.time === +time; });
        return !selectedTime || (selectedTime && selectedTime.disabled);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MinutesFormatterPipe = /** @class */ (function () {
        function MinutesFormatterPipe() {
        }
        /**
         * @param {?} minute
         * @param {?=} gap
         * @return {?}
         */
        MinutesFormatterPipe.prototype.transform = /**
         * @param {?} minute
         * @param {?=} gap
         * @return {?}
         */
            function (minute, gap) {
                if (gap === void 0) {
                    gap = 5;
                }
                if (!minute) {
                    return minute;
                }
                return minute % gap === 0 ? minute : '';
            };
        MinutesFormatterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'minutesFormatter'
                    },] }
        ];
        return MinutesFormatterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerPeriodComponent = /** @class */ (function () {
        function NgxMaterialTimepickerPeriodComponent() {
            this.timePeriod = TimePeriod;
            this.isPeriodAvailable = true;
            this.periodChanged = new core.EventEmitter();
        }
        /**
         * @param {?} period
         * @return {?}
         */
        NgxMaterialTimepickerPeriodComponent.prototype.changePeriod = /**
         * @param {?} period
         * @return {?}
         */
            function (period) {
                this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);
                if (this.isPeriodAvailable) {
                    this.periodChanged.next(period);
                }
            };
        /**
         * @return {?}
         */
        NgxMaterialTimepickerPeriodComponent.prototype.animationDone = /**
         * @return {?}
         */
            function () {
                this.isPeriodAvailable = true;
            };
        /**
         * @private
         * @param {?} period
         * @return {?}
         */
        NgxMaterialTimepickerPeriodComponent.prototype.isSwitchPeriodAvailable = /**
         * @private
         * @param {?} period
         * @return {?}
         */
            function (period) {
                /** @type {?} */
                var time = this.getDisabledTimeByPeriod(period);
                return !time.every(function (t) { return t.disabled; });
            };
        /**
         * @private
         * @param {?} period
         * @return {?}
         */
        NgxMaterialTimepickerPeriodComponent.prototype.getDisabledTimeByPeriod = /**
         * @private
         * @param {?} period
         * @return {?}
         */
            function (period) {
                switch (this.activeTimeUnit) {
                    case TimeUnit.HOUR:
                        return TimepickerTime.disableHours(this.hours, {
                            min: this.minTime,
                            max: this.maxTime,
                            format: this.format,
                            period: period
                        });
                    case TimeUnit.MINUTE:
                        return TimepickerTime.disableMinutes(this.minutes, +this.selectedHour, {
                            min: this.minTime,
                            max: this.maxTime,
                            format: this.format,
                            period: period
                        });
                    default:
                        throw new Error('no such TimeUnit');
                }
            };
        NgxMaterialTimepickerPeriodComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-material-timepicker-period',
                        template: "<div class=\"timepicker-period\">\n\t\t\t<button class=\"timepicker-dial__item timepicker-period__btn\"\n                  [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\"\n                  (click)=\"changePeriod(timePeriod.AM)\"\n                  type=\"button\">AM</button>\n    <button class=\"timepicker-dial__item timepicker-period__btn\"\n          [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\"\n          (click)=\"changePeriod(timePeriod.PM)\"\n          type=\"button\">PM</button>\n    <div class=\"timepicker-period__warning\" [@scaleInOut] (@scaleInOut.done)=\"animationDone()\" *ngIf=\"!isPeriodAvailable\">\n        <p>Current time would be invalid in this period.</p>\n    </div>\n</div>\n",
                        animations: [
                            animations.trigger('scaleInOut', [
                                animations.transition(':enter', [
                                    animations.style({ transform: 'scale(0)' }),
                                    animations.animate('.2s', animations.style({ transform: 'scale(1)' })),
                                    animations.sequence([
                                        animations.animate('3s', animations.style({ opacity: 1 })),
                                        animations.animate('.3s', animations.style({ opacity: 0 }))
                                    ])
                                ])
                            ])
                        ],
                        styles: ["@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}.timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border-radius:3px;transition:background-color .5s}.timepicker-period__btn:focus{background-color:rgba(0,0,0,.07)}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:rgba(0,0,0,.55);color:#fff;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px}"]
                    }] }
        ];
        NgxMaterialTimepickerPeriodComponent.propDecorators = {
            selectedPeriod: [{ type: core.Input }],
            format: [{ type: core.Input }],
            activeTimeUnit: [{ type: core.Input }],
            hours: [{ type: core.Input }],
            minutes: [{ type: core.Input }],
            minTime: [{ type: core.Input }],
            maxTime: [{ type: core.Input }],
            selectedHour: [{ type: core.Input }],
            periodChanged: [{ type: core.Output }]
        };
        return NgxMaterialTimepickerPeriodComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AutofocusDirective = /** @class */ (function () {
        function AutofocusDirective(element, document) {
            this.element = element;
            this.document = document;
            this.activeElement = this.document.activeElement;
        }
        /**
         * @return {?}
         */
        AutofocusDirective.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isFocusActive) {
                    // To avoid ExpressionChangedAfterItHasBeenCheckedError;
                    setTimeout(function () { return _this.element.nativeElement.focus(); });
                }
            };
        /**
         * @return {?}
         */
        AutofocusDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // To avoid ExpressionChangedAfterItHasBeenCheckedError;
                setTimeout(function () { return _this.activeElement.focus(); });
            };
        AutofocusDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[timepickerAutofocus]'
                    },] }
        ];
        /** @nocollapse */
        AutofocusDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        AutofocusDirective.propDecorators = {
            isFocusActive: [{ type: core.Input, args: ['timepickerAutofocus',] }]
        };
        return AutofocusDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMaterialTimepickerModule = /** @class */ (function () {
        function NgxMaterialTimepickerModule() {
        }
        /**
         * @return {?}
         */
        NgxMaterialTimepickerModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgxMaterialTimepickerModule,
                    providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]
                };
            };
        NgxMaterialTimepickerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        exports: [
                            NgxMaterialTimepickerComponent,
                            NgxMaterialTimepickerToggleComponent,
                            TimepickerDirective,
                            NgxMaterialTimepickerToggleIconDirective
                        ],
                        declarations: [
                            NgxMaterialTimepickerComponent,
                            NgxMaterialTimepicker24HoursFaceComponent,
                            NgxMaterialTimepicker12HoursFaceComponent,
                            NgxMaterialTimepickerMinutesFaceComponent,
                            NgxMaterialTimepickerFaceComponent,
                            NgxMaterialTimepickerToggleComponent,
                            NgxMaterialTimepickerButtonComponent,
                            NgxMaterialTimepickerDialComponent,
                            NgxMaterialTimepickerDialControlComponent,
                            NgxMaterialTimepickerPeriodComponent,
                            StyleSanitizerPipe,
                            TimeFormatterPipe,
                            TimepickerDirective,
                            OverlayDirective,
                            NgxMaterialTimepickerToggleIconDirective,
                            AutofocusDirective,
                            MinutesFormatterPipe
                        ]
                    },] }
        ];
        return NgxMaterialTimepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgxMaterialTimepickerModule = NgxMaterialTimepickerModule;
    exports.ɵj = NgxMaterialTimepicker12HoursFaceComponent;
    exports.ɵh = NgxMaterialTimepicker24HoursFaceComponent;
    exports.ɵm = NgxMaterialTimepickerButtonComponent;
    exports.ɵo = NgxMaterialTimepickerDialControlComponent;
    exports.ɵn = NgxMaterialTimepickerDialComponent;
    exports.ɵl = NgxMaterialTimepickerFaceComponent;
    exports.ɵi = NgxMaterialTimepickerHoursFace;
    exports.ɵk = NgxMaterialTimepickerMinutesFaceComponent;
    exports.ɵp = NgxMaterialTimepickerPeriodComponent;
    exports.ɵe = NgxMaterialTimepickerToggleComponent;
    exports.ɵt = AutofocusDirective;
    exports.ɵf = NgxMaterialTimepickerToggleIconDirective;
    exports.ɵg = TimepickerDirective;
    exports.ɵs = OverlayDirective;
    exports.ɵa = AnimationState;
    exports.ɵb = NgxMaterialTimepickerComponent;
    exports.ɵu = MinutesFormatterPipe;
    exports.ɵq = StyleSanitizerPipe;
    exports.ɵr = TimeFormatterPipe;
    exports.ɵd = NgxMaterialTimepickerEventService;
    exports.ɵc = NgxMaterialTimepickerService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,